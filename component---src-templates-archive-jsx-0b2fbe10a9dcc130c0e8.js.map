{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/templates/Archive.jsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["page","children","site","allOrgContent","siteMetadata","title","description","pinned","nodes","className","to","style","float","onClick","navigate","map","post","key","fields","slug","metadata","href","info","email","author","version","posts","pageContext","date","loader","enqueue","React","createContext","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"4LA0Ce,gBAAyB,IAAtBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EAhC9B,OAiCCC,EAD6B,EAC7BA,KAAMC,EADuB,EACvBA,cADuB,EAEND,EAAKE,aAA5BC,EAF6B,EAE7BA,MAAOC,EAFsB,EAEtBA,YACTC,EAASJ,EAAcK,MAE7B,OACE,oCACE,+BAAQH,GAASL,EAAO,MAAQA,EAAO,KACvC,yBAAKS,UAAU,UACb,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,MAAO,SAC3B,4BAAKP,IAEP,uBAAGM,MAAO,CAAEC,MAAO,UACjB,2BAAIN,KAGR,yBAAKG,UAAU,UACb,yBAAKE,MAAO,CAAEC,MAAO,SACnB,4BAAQC,QAAS,kBAAMC,mBAAS,OAAhC,QACA,4BAAQD,QAAS,kBAAMC,mBAAS,WAAhC,QACA,4BAAQD,QAAS,kBAAMC,mBAAS,cAAhC,YAEF,yBAAKH,MAAO,CAAEC,MAAO,UAClBL,EAAOQ,KAAI,SAAAC,GAAI,OACd,4BACEC,IAAKD,EAAKE,OAAOC,KACjBN,QAAS,kBAAMC,mBAASE,EAAKE,OAAOC,QAEnCH,EAAKI,SAASf,UAGnB,4BAAQQ,QAAS,kBAAMC,mBAAS,cAC9B,kBAAC,IAAD,OAEF,4BACED,QAAS,kBAAMC,mBAAS,2CAExB,kBAAC,IAAD,SAILb,EACD,0CACc,uBAAGoB,KAAM,UAAYC,EAAKC,OAAQD,EAAKE,QADrD,MAEGF,EAAKG,Y,kCCtFd,wDAMe,sBAAsB,IAC3BC,EAD0B,EAAlBC,YACRD,MAER,OACE,kBAAC,IAAD,CAAQ1B,KAAK,WACX,uCACA,4BACG0B,EAAMX,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,OAAOC,MAClBH,EAAKI,SAASQ,KADjB,IACwB,IACtB,kBAAC,IAAD,CAAMlB,GAAIM,EAAKE,OAAOC,MAAOH,EAAKI,SAASf,e,kCChBvD,sGAcyBwB,QAAOC,QAELC,IAAMC,cAAc,K,unBChB/C,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,UALRH,EAAEI,SAAYJ,G,yZCsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGET,IAAMU,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-templates-archive-jsx-0b2fbe10a9dcc130c0e8.js","sourcesContent":["import React from \"react\";\n\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\nimport { navigate } from \"@reach/router\";\nimport { FaGithub, FaRss } from \"react-icons/fa\";\n\nimport \"./Layout.css\";\nimport info from \"../../package.json\";\n\nconst useSiteMetadata = () => {\n  return useStaticQuery(\n    graphql`\n      query SITE_METADATA_QUERY {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n\n        allOrgContent(\n          sort: { fields: [metadata___date], order: DESC }\n          filter: {\n            metadata: { keyword: { eq: \"PUBLISHED\" }, pinned: { eq: \"t\" } }\n          }\n        ) {\n          nodes {\n            id\n            metadata {\n              title\n              date(formatString: \"YYYY MMMM Do\")\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    `\n  );\n};\n\nexport default ({ page, children }) => {\n  const { site, allOrgContent } = useSiteMetadata();\n  const { title, description } = site.siteMetadata;\n  const pinned = allOrgContent.nodes;\n\n  return (\n    <>\n      <title>{title + (page ? \" - \" + page : \"\")}</title>\n      <div className=\"header\">\n        <Link to=\"/\" style={{ float: \"left\" }}>\n          <h1>{title}</h1>\n        </Link>\n        <p style={{ float: \"right\" }}>\n          <i>{description}</i>\n        </p>\n      </div>\n      <div className=\"header\">\n        <div style={{ float: \"left\" }}>\n          <button onClick={() => navigate(\"/\")}>Home</button>\n          <button onClick={() => navigate(\"/tags\")}>Tags</button>\n          <button onClick={() => navigate(\"/archive\")}>Archive</button>\n        </div>\n        <div style={{ float: \"right\" }}>\n          {pinned.map(post => (\n            <button\n              key={post.fields.slug}\n              onClick={() => navigate(post.fields.slug)}\n            >\n              {post.metadata.title}\n            </button>\n          ))}\n          <button onClick={() => navigate(\"/rss.xml\")}>\n            <FaRss />\n          </button>\n          <button\n            onClick={() => navigate(\"https://github.com/randomrambler/dwim\")}\n          >\n            <FaGithub />\n          </button>\n        </div>\n      </div>\n      {children}\n      <footer>\n        &copy; 2020 <a href={\"mailto:\" + info.email}>{info.author}</a>, v\n        {info.version}\n      </footer>\n    </>\n  );\n};\n","import React from \"react\";\n\nimport { Link } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\n\nexport default ({ pageContext }) => {\n  const { posts } = pageContext;\n\n  return (\n    <Layout page=\"Archive\">\n      <h1>Archive</h1>\n      <ul>\n        {posts.map(post => (\n          <li key={post.fields.slug}>\n            {post.metadata.date}:{\" \"}\n            <Link to={post.fields.slug}>{post.metadata.title}</Link>\n          </li>\n        ))}\n      </ul>\n    </Layout>\n  );\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}