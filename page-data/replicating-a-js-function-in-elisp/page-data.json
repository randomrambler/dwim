{"componentChunkName":"component---src-templates-post-jsx","path":"/replicating-a-js-function-in-elisp","result":{"data":{"orgContent":{"metadata":{"title":"Replicating a JS function in elisp","date":"June 11th, 2021","tags":["emacs","dev"]},"html":"<div class=\"section\"><p>I wanted to replicate the following function from <a href=\"http://pajhome.org.uk/crypt/md5/\">Javascript md5 module</a> in Emacs lips:</p><pre><code class=\"language-js\">  <span class=\"token keyword\">function</span> <span class=\"token function\">b64_md5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">rstr2b64</span><span class=\"token punctuation\">(</span><span class=\"token function\">rstr_md5</span><span class=\"token punctuation\">(</span><span class=\"token function\">str2rstr_utf8</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre><p>The nested functions are:</p><ol><li><code>str2rstr_utf8</code> encodes a string as utf-8, assuming it is utf-16</li><li><code>rster_md5</code> calculates the md5 of a raw string</li><li><code>rstr2b64</code> converts a raw string to a base-64 string</li></ol><p>Outputs:</p><pre><code class=\"language-js\">  <span class=\"token function\">str2rstr_utf8</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"test\"</span>\n  <span class=\"token function\">rstr_md5</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// \"\\tkÍF!ÓsÊÞN&amp;'´ö\"</span>\n  <span class=\"token function\">rstr2b64</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// \"dGVzdA\"</span>\n  <span class=\"token function\">rstr2b64</span><span class=\"token punctuation\">(</span><span class=\"token function\">rstr_md5</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"CY9rzUYh03PK3k6DJie09g\"</span></code></pre><p>I could quite easily find some elisp functions that may be equivalent:</p><table><thead><tr><th>Javascript md5</th><th>Elisp</th></tr></thead><tbody><tr><td><code>str2rstr_utf8</code></td><td><code>encode-coding-string</code></td></tr><tr><td><code>rster_md5</code></td><td><code>secure-hash</code></td></tr><tr><td><code>str2b64</code></td><td><code>base64-encode-string</code></td></tr></tbody></table><p>On closer inspection I figured I would not need <code>encode-coding-string</code> because <a href=\"https://nullprogram.com/blog/2014/06/13/\">Emacs</a> already uses UTF8 encoding internally, while  <a href=\"https://mathiasbynens.be/notes/javascript-encoding\">Javascript</a> uses UTF-16.</p><p>It turns out that the other two elisp functions are close matches to their JS counterparts:</p><pre><code class=\"language-emacs-lisp\">   <span class=\"token punctuation\">(</span><span class=\"token car\">base64-encode-string</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">; \"dGVzdA\", same as rstr2b64</span>\n   <span class=\"token punctuation\">(</span><span class=\"token car\">secure-hash</span> <span class=\"token quoted-symbol variable symbol\">'md5</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">; \"098f6bcd4621d373cade4e832627b4f6\"</span>\n                                   <span class=\"token comment\">; which is HEX for \"\tkÍF!ÓsÊÞN&amp;'´ö\"</span></code></pre><p>So, I need a function to <a href=\"https://stackoverflow.com/questions/12003231/how-do-i-convert-a-string-of-hex-into-ascii-using-elisp\">decode a HEX string</a>:</p><pre><code class=\"language-emacs-lisp\">  <span class=\"token punctuation\">(</span><span class=\"token defun\"><span class=\"token keyword\">defun</span> <span class=\"token function\">decode-hex-string</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">hex-string</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">res</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">dotimes</span> <span class=\"token punctuation\">(</span><span class=\"token car\">i</span> <span class=\"token punctuation\">(</span><span class=\"token car\">/</span> <span class=\"token punctuation\">(</span><span class=\"token car\">length</span> hex-string<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">apply</span> <span class=\"token quoted-symbol variable symbol\">#'concat</span> <span class=\"token punctuation\">(</span><span class=\"token car\">reverse</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">hex-byte</span> <span class=\"token punctuation\">(</span><span class=\"token car\">substring</span> hex-string <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">2</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> i <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token car\">push</span> <span class=\"token punctuation\">(</span><span class=\"token car\">format</span> <span class=\"token string\">\"%c\"</span> <span class=\"token punctuation\">(</span><span class=\"token car\">string-to-number</span> hex-byte <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token car\">decode-hex-string</span> <span class=\"token punctuation\">(</span><span class=\"token car\">secure-hash</span> <span class=\"token quoted-symbol variable symbol\">'md5</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">; \"\tkÍF!ÓsÊÞN&amp;'´ö\" same as rster_md5</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">base64-encode-string</span>\n   <span class=\"token punctuation\">(</span><span class=\"token car\">decode-hex-string</span> <span class=\"token punctuation\">(</span><span class=\"token car\">secure-hash</span> <span class=\"token quoted-symbol variable symbol\">'md5</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">; \"CY9rzUYh03PK3k6DJie09g\"</span></code></pre><p>Et voilá!</p></div>"}},"pageContext":{"slug":"/replicating-a-js-function-in-elisp","previous":{"fields":{"slug":"/what-is-emacs"},"metadata":{"title":"What is Emacs","date":"April 11th, 2021","tags":["emacs"]}},"next":{"fields":{"slug":"/about-me"},"metadata":{"title":"About me","date":"June 11th, 2021","tags":["meta","private"]}}}}}